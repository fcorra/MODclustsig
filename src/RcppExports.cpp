// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// HellDist
double HellDist(arma::mat X);
RcppExport SEXP _MODclustsig_HellDist(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(HellDist(X));
    return rcpp_result_gen;
END_RCPP
}
// csam
arma::mat csam(arma::mat& x, arma::mat& em);
RcppExport SEXP _MODclustsig_csam(SEXP xSEXP, SEXP emSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type em(emSEXP);
    rcpp_result_gen = Rcpp::wrap(csam(x, em));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MODclustsig_HellDist", (DL_FUNC) &_MODclustsig_HellDist, 1},
    {"_MODclustsig_csam", (DL_FUNC) &_MODclustsig_csam, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MODclustsig(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
